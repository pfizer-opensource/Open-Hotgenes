% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MethodsHotgenes.R
\docType{class}
\name{Hotgenes-class}
\alias{Hotgenes-class}
\alias{auxiliary_assays_features}
\alias{auxiliary_assays_default}
\alias{auxiliary_assays_}
\alias{auxiliary_assays_<-}
\alias{auxiliary_assays_<-,Hotgenes-method}
\alias{O_}
\alias{coldata_}
\alias{coldata_names}
\alias{coldata_<-}
\alias{coldata_<-,Hotgenes-method}
\alias{designMatrix_}
\alias{contrastMatrix_}
\alias{Normalized_Data_}
\alias{SampleIDs_}
\alias{ExpressionSlots_}
\alias{ExpressionData_}
\alias{Output_DE_}
\alias{contrasts_}
\alias{Features_}
\alias{Mapper_}
\alias{Mapper_<-}
\alias{Mapper_<-,Hotgenes-method}
\alias{Background_}
\title{Hotgenes class}
\usage{
auxiliary_assays_features(Hotgenes = NULL)

auxiliary_assays_default(Hotgenes = NULL, coldata_ids = NULL)

auxiliary_assays_(Hotgenes = NULL, features = NULL, mode = "all")

auxiliary_assays_(object) <- value

\S4method{auxiliary_assays_}{Hotgenes}(object) <- value

O_(Hotgenes = NULL)

coldata_(Hotgenes = NULL, coldata_ids = coldata_names(Hotgenes), mode = "all")

coldata_names(Hotgenes = NULL)

coldata_(object) <- value

\S4method{coldata_}{Hotgenes}(object) <- value

designMatrix_(Hotgenes = NULL)

contrastMatrix_(Hotgenes = NULL)

Normalized_Data_(Hotgenes = NULL, slot = NULL)

SampleIDs_(Hotgenes = NULL)

ExpressionSlots_(Hotgenes = NULL)

ExpressionData_(Hotgenes = NULL, slot = ExpressionSlots_(Hotgenes)[1])

Output_DE_(
  Hotgenes = NULL,
  contrasts = NULL,
  mapFeatures = TRUE,
  hotList = NULL,
  padj_cut = 0.1,
  .log2FoldChange = 0,
  annotateSig = TRUE,
  as_list = FALSE
)

contrasts_(Hotgenes = NULL)

Features_(Hotgenes = NULL)

Mapper_(Hotgenes = NULL)

Mapper_(object) <- value

\S4method{Mapper_}{Hotgenes}(object) <- value

Background_(Hotgenes = NULL, Col = "Feature")
}
\arguments{
\item{Hotgenes}{Hotgenes object.}

\item{coldata_ids}{Variable(s) stored in coldata slot can be selected
by column name, using a vector strings. Default is \code{\link[=coldata_names]{coldata_names()}}. If
set to "", an empty data.frame is returned.}

\item{features}{vector of feature to return. If NULL (default)
all data will be returned. No need to specifiy "SampleIDs".}

\item{mode}{string indicating the type of coldata to call.
Choices include: "all", "quanti", "quali". If "all", the
default, all columns will be returned. If "quanti", only
numeric coldata will be returned. If "quali", only
qualitative coldata will be returned.}

\item{object}{Hotgenes object.}

\item{value}{a data.frame containing a "Feature"
for alias mapping.}

\item{slot}{Single name of expression data.frame in
Normalized_Expression slot to be returned. Default is
first string returned by ExpressionSlots_()}

\item{contrasts}{vector for DE data.frames in Output_DE slot to return.
See ?contrasts_. If NULL (default), all contrasts used.}

\item{mapFeatures}{If FALSE, no changes will be made. If TRUE (default),
features will be mapped to information provided in the mapper slot.
See details below and  \code{\link[Hotgenes]{Mapper_}}.}

\item{hotList}{vector of Features to select. This will overide
all cut offs.}

\item{padj_cut}{numeric value for padj limit (0.1 is Default).}

\item{.log2FoldChange}{absolute log2FoldChange for filtering.
Default is 0.}

\item{annotateSig}{logical, if TRUE (default), a column is added
to show significance for any hotList feature (based on cut offs).}

\item{as_list}{logical, default is FALSE. If true, results returned
as a named list other object with be a dataframe grouped by "contrast".}

\item{Col}{String matching the column id from Mapper
slot to pull. Default is "Feature".}
}
\value{
auxiliary_assays_default() returns
a data.frame with the minimum requirements for a
Hotgenes object. The coldata_ids parameter can be used to
define metadata columns to include in the data.frame, to help
align data.

auxiliary_assays_ returns a data.frame
containing auxiliary assays to complement expression data

O_ Returns the original R object imported into Hotgenes.
For HotgenesDESeq2 this a DESeqDataSet class object.
For HotgenesMonocle3 this is a cell_data_set class object.
For Hotgeneslimma this is an EList class object (Expression data),
with the limmafit (MArrayLM class object) add in in the "limmafit"
slot.

coldata_ Returns Coldata (Experimental Variables).

designMatrix_ Returns the model matrix used
for the original DE analysis (if available).

contrastMatrix_ Returns the contrast matrix used
for the original DE analysis (if available).

Named list from Normalized_Expression slot
if "slot" is NULL.
If slot argument is provided, a data.frame is returned.

SampleIDs_ Returns the colnames of the expression data in the
first ExpressionSlot.

ExpressionSlots_ Returns the names for all the available
expression data. This depends on the original
R package used for DE analysis. For example,
DESeq2 data can be normalized by "rld" or "VST".

returns a data.frame

Output_DE_ Returns complete unfiltered Output_DE slot object.

contrasts_ Returns exported contrasts.

Features_ Returns the rownames of the expression data in the
first ExpressionSlot. It will also check for empty rownames and
will return an error if any are detected. This will be used as
a last check before returning a hotgenes object during generation.

Mapper_ Returns Mapper containing
aliases mapped to Features. Only aliases in 
expression data are returned

Background_ Returns a vector of
all Features in the expression data.
}
\description{
Hotgenes class

Returns features from auxiliary_assays slot

Returns colnames for coldata slot
}
\details{
Except for when mode = "all", single level columns will be
dropped.
}
\section{Slots}{

\describe{
\item{\code{Output_DE}}{Named list of data.frames
Each data.frame contains atleast: "Feature", "baseMean","log2FoldChange",
"stat", "pvalue", "padj".
Additional values dependent on original DE analysis.
Accessible via Output_DE_.}

\item{\code{Normalized_Expression}}{named list of data.frames available
expression data. Names of available slots accessible via ExpressionSlots_.
Expression data can be accessed via Normalized_Data_.}

\item{\code{coldata}}{The coldata, as a data.frame with Sample Metadata.
Accessible via coldata_.}

\item{\code{designMatrix}}{The model matrix used for DE analysis.
Accessible via designMatrix_.}

\item{\code{contrastMatrix}}{The contrast matrix used for DE analysis.
Accessible via contrastMatrix_.}

\item{\code{Original_Object}}{This is the original object imported into Hotgenes.
Accessible via O_.}

\item{\code{auxiliary_assays}}{A data.frame with auxiliary assays}

\item{\code{Mapper}}{Slot for a data.frame that can be used
to map aliases to original assay names. Must be a
data.frame containing a "Feature" column,
which will be used for mapping to results. This object
can be updated or viewed using Mapper_}
}}

\examples{
# load package
library(Hotgenes)


fit_Hotgenes_dir <- system.file("extdata",
  paste0("fit_Hotgenes", ".RDS"),
  package = "Hotgenes",
  mustWork = TRUE
)

# from limma
fit_Hotgenes <- readRDS(fit_Hotgenes_dir) \%>\% 
  update_object()

# call the object to get summary
fit_Hotgenes


# auxiliary_assays_ -------------------------------------------------------
fit_Hotgenes \%>\% 
auxiliary_assays_()

# ExpressionSlots_ ------------------------------------
fit_Hotgenes \%>\% ExpressionSlots_()

# Normalized_Data_ --------------------------------------------------------
# should return object class data.frame when slot specified
fit_Hotgenes \%>\%
  Normalized_Data_(slot = "logCPM") \%>\% head()

# O_ --------------------------------------------------
# get original object
fit_Hotgenes \%>\%
  O_() \%>\%
  class()

# designMatrix_ ---------------------------------------
fit_Hotgenes \%>\%
  designMatrix_() \%>\%
  head()

# coldata_ --------------------------------------------
fit_Hotgenes \%>\% 
  coldata_()

# SampleIDs_ ------------------------------------------
fit_Hotgenes \%>\% SampleIDs_()

# contrasts_ ------------------------------------------
fit_Hotgenes \%>\% contrasts_()

# Mapper_ ---------------------------------------------
fit_Hotgenes \%>\%
  Mapper_() \%>\%
  head()

# Features_ -------------------------------------------
fit_Hotgenes \%>\% Features_()

# Background_ -----------------------------------------
# this returns Features mapped to Mapper aliases
fit_Hotgenes \%>\% 
  Background_(Col = "ensembl_id")


# updating object ---------------------------------------------------------

# Adding column of strings
coldata_(fit_Hotgenes)$New <- "value"
coldata_(fit_Hotgenes)


# update mapper slot

# in case you wanted to include aliases for your genes
# requires a "Feature" column that contains gene names in expression matrix
dbCon <- org.Hs.eg.db::org.Hs.eg_dbconn()

sqlQuery <- "SELECT * FROM ENSEMBL, gene_info WHERE ENSEMBL._id == gene_info._id;"

ensembl_Symbol <- DBI::dbGetQuery(dbCon, sqlQuery) \%>\%
  dplyr::select(dplyr::any_of(c("Feature" = "symbol", 
                                "gene_name", 
                                "ensembl_id"))) \%>\%
  tibble::as_tibble()

Test_Hotgenes <- fit_Hotgenes

Mapper_(Test_Hotgenes) <- ensembl_Symbol
Mapper_(Test_Hotgenes)


# auxiliary_assays_ --------------------------------------------------------
fit_Hotgenes_2 <- fit_Hotgenes

coldata_(fit_Hotgenes_2)$Samples <- as.character(SampleIDs_(fit_Hotgenes_2))

df_assays_slot <- auxiliary_assays_default(fit_Hotgenes_2) 
df_assays_slot

# making example data
set.seed(12)

max_len <- length(SampleIDs_(fit_Hotgenes_2))

AssayData  <- df_assays_slot \%>\% 
  dplyr::mutate(assay1 = rnorm(max_len),
                assay2 = rnorm(max_len))

AssayData

auxiliary_assays_(fit_Hotgenes_2) <- AssayData
auxiliary_assays_(fit_Hotgenes_2) 

}
