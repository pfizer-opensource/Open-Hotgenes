% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Hotgenes.R
\name{Hotgeneslimma}
\alias{Hotgeneslimma}
\title{Exports limma DE analysis to Hotgenes}
\usage{
Hotgeneslimma(
  limmafit = NULL,
  coldata = NULL,
  Expression = NULL,
  adjust.method = "BH",
  contrasts = NULL,
  auxiliary_assays = NULL,
  Expression_name = "Normalized_data",
  Exps_list = NULL,
  Mapper = NULL
)
}
\arguments{
\item{limmafit}{the fit generated by limma}

\item{coldata}{data.frame containing Experimental design metadata}

\item{Expression}{R object containing the expression data
used for limma differential expression analysis.}

\item{adjust.method}{method used to adjust the p-values for multiple testing.  Options, in increasing conservatism, include \code{"none"}, \code{"BH"}, \code{"BY"} and \code{"holm"}.
  See \code{\link{p.adjust}} for the complete list of options. A \code{NULL} value will result in the default adjustment method, which is \code{"BH"}.}

\item{contrasts}{colnames of limmafit object, returned using the colnames
function. If NULL, default, DE for all results will be reported.}

\item{auxiliary_assays}{(Optional). A data.frame with a SampleIDs column
matching the rownames of coldata object. This data.frame can be used
to store auxiliary data, such as clinical scores, observations, and/or 
low-throughput assay data. See details below.}

\item{Expression_name}{String used to name the expression data slot. Default
is "Normalized_data".}

\item{Exps_list}{Optional named list of additional expression data to
include. Default is NULL. All list objects will be converted to data.matrix.}

\item{Mapper}{(Required). A data.frame that can be used
to map aliases to original assay names. Must have a
"Feature" column, which will be used for mapping to results. This object
can be updated or viewed using Mapper_.}
}
\value{
Hotgenes object
}
\description{
Exports limma DE analysis to Hotgenes
}
\details{
This exports DE via limma::topTable function.
Some columns are renamed.
The P.Value column is renamed to pvalue.
The adj.P.Val column is renamed to padj.
The logFC column is renamed to log2FoldChange.
The AveExpr column is renamed to baseMean.
A stat column wil be added, which is generated with the
following equation: -log10(.data$pvalue)*sign(.data$log2FoldChange)

topTable will be used for each contrast,
individually.
}
\examples{
if(interactive()) {
  require(Hotgenes)
  
  # incase you wanted to include aliases for your genes
  # requires a "Feature" column that contains gene names in expression matrix
  dbCon <- org.Hs.eg.db::org.Hs.eg_dbconn()
  sqlQuery <-
    "SELECT * FROM ENSEMBL, gene_info WHERE ENSEMBL._id == gene_info._id;"
  
  ensembl_Symbol <- DBI::dbGetQuery(dbCon, sqlQuery) \%>\%
    dplyr::select(c("symbol", "ensembl_id")) \%>\%
    dplyr::rename("Feature" = .data$symbol)
  
  ensembl_Symbol \%>\% head()
  
  # Hotgeneslimma -----------------------------------------------------------
  require(DESeq2)
  #require(limma)
  #require(edgeR)
  
  dds_con_dir <- system.file("extdata",
                             "dds_con.Rdata",
                             package = "Hotgenes",
                             mustWork = TRUE)
  load(dds_con_dir)
  
  # Example Expression data and coldata
  cts <- counts(dds_con) \%>\% as.data.frame()
  Design <- colData(dds_con) \%>\%
    base::as.data.frame() \%>\%
    dplyr::select_if(is.factor) \%>\%
    dplyr::mutate(Time = as.numeric(levels(.data$Hrs))[.data$Hrs])
  
  # Create DGEList object
  # and calculate normalization factors
  d0 <- edgeR::DGEList(cts)
  d0 <- edgeR::calcNormFactors(d0)
  
  # Filter low-expressed genes
  # disabled in this example
  if (FALSE) {
    cutoff <- 1
    drop <- which(apply(cpm(d0), 1, max) < cutoff)
    d <- d0[-drop,]
    dim(d) # number of genes lef
  }
  
  d <- d0
  
  # make a model.matrix
  model_Matrix <- model.matrix( ~ sh * Hrs,
                                data = Design)
  # voom
  vm_exp <- limma::voom(d, model_Matrix, plot = TRUE)
  
  # make fit
  fit <- limma::lmFit(vm_exp, model_Matrix)
  fit <- limma::eBayes(fit)
  
  # Get alternative exps
  alt_Exp <- list(counts = data.matrix(d0))
  
  # Convert to Hotgenes Object
  fit_Hotgenes <- Hotgeneslimma(
    limmafit = fit,
    coldata = Design,
    Expression = vm_exp,
    Expression_name = "logCPM",
    Exps_list = alt_Exp,
    Mapper = ensembl_Symbol
  )
  
  fit_Hotgenes
  
  # with contrasts ----------------------------------------------------------
  
  # make a model.matrix
  model_Matrix_2 <- model.matrix( ~ 0 + sh,
                                data = Design)
  # voom
  contrast_m <- limma_paired_contrasts(c("shEWS", "shCtrl"),
                                       modelMatrix= model_Matrix_2)
  head(contrast_m)
  
  # voom
  vm_exp <- limma::voom(d, model_Matrix_2, plot = TRUE)
  
  # make fit
  fit <- limma::lmFit(vm_exp, model_Matrix_2)
  fit2 <- limma::contrasts.fit(fit = fit, contrasts = contrast_m)
  
  fit2 <- limma::eBayes(fit2)
  
  # Get alternative exps
  alt_Exp <- list(counts = data.matrix(d0))
  
  # Convert to Hotgenes Object
  fit_Hotgenes_contrast <- Hotgeneslimma(
    limmafit = fit2,
    coldata = Design,
    Expression = vm_exp,
    Expression_name = "logCPM",
    Exps_list = alt_Exp,
    Mapper = ensembl_Symbol
  )
  
  fit_Hotgenes_contrast
  
  
  
  
}
}
\seealso{
limma::topTable
}
