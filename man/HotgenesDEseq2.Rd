% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Hotgenes.R
\name{HotgenesDEseq2}
\alias{HotgenesDEseq2}
\title{Exports DESeq2 object to Hotgenes}
\usage{
HotgenesDEseq2(
  DEseq2_object = NULL,
  lfcShrink_type = "normal",
  contrasts = NULL,
  ExpressionData = c("rld", "vsd", "log2"),
  auxiliary_assays = NULL,
  Mapper = NULL,
  ...
)
}
\arguments{
\item{DEseq2_object}{the output object generated by DESeq2}

\item{lfcShrink_type}{"normal" (Default) is the original DESeq2 shrinkage
estimator. Other options is "apeglm".}

\item{contrasts}{values from DESeq2 resultsNames function. If NULL
(default) DE for all results will be reported.}

\item{ExpressionData}{String for normalization method.
Options are "log2" (normTransform),
"vsd" (varianceStabilizingTransformation), and,
"rld" (rlog).}

\item{auxiliary_assays}{(Optional). A data.frame with a SampleIDs column
matching the rownames of coldata object. This data.frame can be used
to store auxiliary data, such as clinical scores, observations, and/or 
low-throughput assay data. See details below.}

\item{Mapper}{(Required). A data.frame that can be used
to map aliases to original assay names. Must have a
"Feature" column, which will be used for mapping to results. This object
can be updated or viewed using Mapper_.}

\item{...}{Additional parameters for \code{\link[DESeq2]{lfcShrink}}.}
}
\description{
This pulls DE results using lfcShrink function of
DESeq2. For downstream GSEA, the "stat" column can be used. However,
in the case of lfcShrink via "apeglm" when no stat column is provided,
one will be generated using the following equation:
-log10(.data$pvalue)*sign(.data$log2FoldChange)
}
\examples{
if (interactive()) {
  require(Hotgenes)

  # incase you wanted to include aliases for your genes
  # requires a "Feature" column that contains gene names in expression matrix
  dbCon <- org.Hs.eg.db::org.Hs.eg_dbconn()
  sqlQuery <- "SELECT * FROM ENSEMBL, gene_info WHERE ENSEMBL._id == gene_info._id;"

  ensembl_Symbol <- DBI::dbGetQuery(dbCon, sqlQuery) \%>\%
    dplyr::select(c("Feature" = "symbol", "ensembl_id"))
  

  ensembl_Symbol \%>\% head()

  # HotgenesDEseq2 ----------------------------------------------------------
  require(DESeq2)


  dds_con_dir <- system.file("extdata",
    "dds_con.Rdata",
    package = "Hotgenes",
    mustWork = TRUE
  )
  load(dds_con_dir)

  # Example Expression data and coldata
  cts <- DESeq2::counts(dds_con) \%>\% as.data.frame()
  Design <- SummarizedExperiment::colData(dds_con) \%>\%
    base::as.data.frame() \%>\%
    dplyr::select_if(is.factor) \%>\%
    dplyr::mutate(Time = as.numeric(levels(.data$Hrs))[.data$Hrs])

  # set up DESeq2
  model_DESeq <- eval(~ sh * Hrs)

  dds <- DESeq2::DESeqDataSetFromMatrix(
    countData = cts,
    colData = Design,
    design = model_DESeq
  )

  dds <- DESeq2::DESeq(dds)

  # Convert to Hotgenes Object

  dds_Hotgenes <- HotgenesDEseq2(
    DEseq2_object = dds,
    lfcShrink_type = "apeglm",
    contrasts = "sh_EWS_vs_Ctrl", # set this for speed
    ExpressionData = "log2", # set this for speed
    Mapper = ensembl_Symbol
  )

  dds_Hotgenes
  
  
}
}
\seealso{
\code{\link[DESeq2]{lfcShrink}}
}
