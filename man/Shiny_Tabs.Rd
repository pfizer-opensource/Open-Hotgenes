% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Shiny_Tabs.R
\name{Shiny_Tabs}
\alias{Shiny_Tabs}
\alias{VennDiagram_UI_inputs_support}
\alias{VennDiagram_UI_main_support}
\alias{VennDiagram_Server_module}
\alias{PCA_UI_inputs_support}
\alias{PCA_UI_main_support}
\alias{PCA_Server_module}
\alias{Metadata_UI_main_support}
\alias{Metadata_Server_module}
\alias{DE_pheUI}
\alias{DE_pheServer}
\alias{fgsea_UI_inputs_support}
\alias{fgsea_UI_main_support}
\alias{fgsea_Server_module}
\alias{ExpsPlot_UI_inputs_support}
\alias{ExpsPlot_UI_main_support}
\alias{ExpsPlot_Server_module}
\alias{DEstats_UI_inputs_support}
\alias{DEstats_UI_main_support}
\alias{DEstats_Server_module}
\alias{BoxPlot_UI_inputs_support}
\alias{BoxPlot_UI_main_support}
\alias{BoxPlot_Server_module}
\alias{AuxAssays_sidepanel}
\alias{AuxAssays_mainpanel}
\alias{AuxAssays_server}
\title{Modules for Shiny_Tabs}
\usage{
VennDiagram_UI_inputs_support(id = NULL, tabsetPanel_id = "tabs")

VennDiagram_UI_main_support(
  id = NULL,
  tabsetPanel_id = "tabs",
  title = "Venn Diagrams"
)

VennDiagram_Server_module(
  id = NULL,
  input = NULL,
  output = NULL,
  session = NULL,
  Hotgenes = NULL,
  ExpressionSlots = reactive(NULL),
  SampleIDs = reactive(NULL)
)

PCA_UI_inputs_support(id = NULL, tabsetPanel_id = "tabs")

PCA_UI_main_support(id = NULL, tabsetPanel_id = "tabs", title = "PCA")

PCA_Server_module(
  id = NULL,
  input = NULL,
  output = NULL,
  session = NULL,
  Hotgenes = NULL,
  ExpressionSlots = reactive(NULL),
  SampleIDs = reactive(NULL)
)

Metadata_UI_main_support(
  id = NULL,
  tabsetPanel_id = "tabs",
  title = "Metadata"
)

Metadata_Server_module(
  id = NULL,
  input = NULL,
  output = NULL,
  session = NULL,
  Hotgenes = NULL,
  ExpressionSlots = reactive(NULL),
  SampleIDs = reactive(NULL)
)

DE_pheUI(id)

DE_pheServer(
  id,
  Hotgenes = NULL,
  ExpressionSlots = shiny::reactive(NULL),
  contrasts = shiny::reactive(NULL),
  padj_cut = shiny::reactive(NULL),
  hotList = shiny::reactive(NULL),
  .log2FoldChange = shiny::reactive(NULL),
  SampleIDs = shiny::reactive(NULL),
  Subtitle = shiny::reactive(NULL),
  annotation_row = shiny::reactive(NULL)
)

fgsea_UI_inputs_support(id = "fgsea_tab", tabsetPanel_id = "tabs")

fgsea_UI_main_support(
  id = "fgsea_tab",
  tabsetPanel_id = "tabs",
  title = "GSEA"
)

fgsea_Server_module(
  id = "fgsea_tab",
  input = NULL,
  output = NULL,
  session = NULL,
  Hotgenes = NULL,
  PCA_ranks = shiny::reactive(NULL),
  ExpressionSlots = shiny::reactive(NULL),
  SampleIDs = shiny::reactive(NULL),
  OntologyMethods = OntologyMethods(),
  Mapper_choices = names(Mapper_(Hotgenes)),
  parallel.sz = 1
)

ExpsPlot_UI_inputs_support(id = NULL, tabsetPanel_id = "tabs")

ExpsPlot_UI_main_support(
  id = NULL,
  tabsetPanel_id = "tabs",
  title = "Exps Plots"
)

ExpsPlot_Server_module(
  id = NULL,
  input = NULL,
  output = NULL,
  session = NULL,
  Hotgenes = NULL,
  ExpressionSlots = shiny::reactive(NULL),
  SampleIDs = shiny::reactive(NULL)
)

DEstats_UI_inputs_support(id = NULL, tabsetPanel_id = "tabs")

DEstats_UI_main_support(
  id = NULL,
  tabsetPanel_id = "tabs",
  title = "DE Stats",
  v_plot_width = 8,
  checkbox_width = 2
)

DEstats_Server_module(
  id = NULL,
  input = NULL,
  output = NULL,
  session = NULL,
  Hotgenes = NULL,
  ExpressionSlots = shiny::reactive(NULL),
  SampleIDs = shiny::reactive(NULL)
)

BoxPlot_UI_inputs_support(id = NULL, tabsetPanel_id = "tabs")

BoxPlot_UI_main_support(
  id = NULL,
  tabsetPanel_id = "tabs",
  title = "Exps Data"
)

BoxPlot_Server_module(
  id = NULL,
  input = NULL,
  output = NULL,
  session = NULL,
  Hotgenes = NULL,
  max_col_levels = 12,
  selected_fillby = ""
)

AuxAssays_sidepanel(id = NULL, tabsetPanel_id = "tabs")

AuxAssays_mainpanel(
  id = NULL,
  tabsetPanel_id = "tabs",
  title = "Auxiliary Assays"
)

AuxAssays_server(
  id = NULL,
  input = NULL,
  output = NULL,
  session = NULL,
  Hotgenes = NULL,
  ExpressionSlots = shiny::reactive(NULL),
  SampleIDs = shiny::reactive(NULL)
)
}
\arguments{
\item{id}{An ID string that corresponds with the ID used to call the module's
UI function.}

\item{tabsetPanel_id}{string matching tabsetPanel id
for conditional panel setting. Default is "tabs",
but common ones include "tabs".}

\item{title}{Display title for tab}

\item{input}{shiny server input parameter}

\item{output}{shiny server output parameter}

\item{session}{Session from which to make a child scope (the default should
almost always be used).}

\item{Hotgenes}{R Hotgenes object}

\item{ExpressionSlots}{name of normalized data to use.
If NULL (default), the first name returned by ExpressionSlots_
will be used.
See HotgenesObj.}

\item{SampleIDs}{vector of sample ids to select}

\item{contrasts}{vector for DE data.frames in Output_DE slot to return.
See ?contrasts_. If NULL (default), all contrasts used.}

\item{padj_cut}{numeric value for padj limit (0.1 is Default).}

\item{hotList}{vector of Features to select. This will overide
all cut offs.}

\item{.log2FoldChange}{absolute log2FoldChange for filtering.
Default is 0.}

\item{Subtitle}{reactive object
containing a string, usually pathway name to append to
heatmap title. Default is NULL.}

\item{annotation_row}{data frame that specifies the annotations shown on left
 side of the heatmap. Each row defines the features for a specific row. The 
rows in the data and in the annotation are matched using corresponding row
 names. Note that color schemes takes into account if variable is continuous
 or discrete.}

\item{PCA_ranks}{reactive object goinging named list of ranks from
generated from PCA tab.}

\item{OntologyMethods}{output of OntologyMethods function.}

\item{Mapper_choices}{vector containing names of
Mapper_ columns that should be used to map expression data
to ontology gene identifiers. Default is names(Mapper_(Hotgenes)).
A named vector may be used, as well.}

\item{parallel.sz}{Number of threads of execution
to use when doing the calculations in parallel.}

\item{v_plot_width}{numeric, width of interactive plot.}

\item{checkbox_width}{numeric, width of check box area on interactive plot.}

\item{max_col_levels}{integer setting the maximum
number of levels a variable, from the coldata, can have for plots.}

\item{selected_fillby}{string for to be passed to BoxPlot as initial selection.
Default is NULL.}
}
\description{
All the tabs in \code{\link[=Shiny_Hotgenes]{Shiny_Hotgenes()}} are written as sets of functions.

Auxiliary Assays:
\code{\link[=AuxAssays_sidepanel]{AuxAssays_sidepanel()}},
\code{\link[=AuxAssays_mainpanel]{AuxAssays_mainpanel()}}, and \code{\link[=AuxAssays_server]{AuxAssays_server()}}

PCA tab:
\code{\link[=PCA_UI_inputs_support]{PCA_UI_inputs_support()}},
\code{\link[=PCA_UI_main_support]{PCA_UI_main_support()}}, and \code{\link[=PCA_Server_module]{PCA_Server_module()}}

Metadata tab:
\code{\link[=Metadata_UI_main_support]{Metadata_UI_main_support()}} and \code{\link[=Metadata_Server_module]{Metadata_Server_module()}}

GSEA tab:
\code{\link[=fgsea_UI_inputs_support]{fgsea_UI_inputs_support()}},
\code{\link[=fgsea_UI_main_support]{fgsea_UI_main_support()}}, and \code{\link[=fgsea_Server_module]{fgsea_Server_module()}}

Exps Plot tab:
\code{\link[=ExpsPlot_UI_inputs_support]{ExpsPlot_UI_inputs_support()}},
\code{\link[=ExpsPlot_UI_main_support]{ExpsPlot_UI_main_support()}}, and \code{\link[=ExpsPlot_Server_module]{ExpsPlot_Server_module()}}

DEstats tab:
\code{\link[=DEstats_UI_inputs_support]{DEstats_UI_inputs_support()}},
\code{\link[=DEstats_UI_main_support]{DEstats_UI_main_support()}}, and \code{\link[=DEstats_Server_module]{DEstats_Server_module()}}

Exps Data tab:
\code{\link[=BoxPlot_UI_inputs_support]{BoxPlot_UI_inputs_support()}},
\code{\link[=BoxPlot_UI_main_support]{BoxPlot_UI_main_support()}}, and \code{\link[=BoxPlot_Server_module]{BoxPlot_Server_module()}}

VennDiagram tab:
\code{\link[=VennDiagram_UI_inputs_support]{VennDiagram_UI_inputs_support()}},
\code{\link[=VennDiagram_UI_main_support]{VennDiagram_UI_main_support()}}, and \code{\link[=VennDiagram_Server_module]{VennDiagram_Server_module()}}
}
\details{
ExpressionSlots, hotList, contrasts, SampleIDs,
padj_cut, and .log2FoldChange must be reactive objects.

For example:

Correct: ExpressionSlots = NormalizedData_Sel

Correct: ExpressionSlots = reactive(input$NormSlot)

Incorrect: ExpressionSlots = NormalizedData_Sel()
}
\examples{
require(Hotgenes)

# load example data
dds_Hotgenes_dir <- system.file("extdata",
paste0("dds_Hotgenes", ".RDS"),
package = "Hotgenes",
mustWork = TRUE)

hotobj <- readRDS(dds_Hotgenes_dir)

# The example below works for all the Shiny_Tabs modules triplet functions
if (FALSE) {
  
options(device.ask.default = FALSE)

# Set UI
ui <- shiny::fluidPage(
  shiny::sidebarLayout(
    shiny::sidebarPanel(
      
      # side panel module
      BoxPlot_UI_inputs_support() ),
    shiny::mainPanel( 
      shiny::tabsetPanel( 
        
        # main panel module
        BoxPlot_UI_main_support()


) ) )) 

# Set up server
server <- function(input, output, session) {
  
 BoxPlot_Server_module(
  Hotgenes = hotobj)


}

# run app

shiny::shinyApp(ui, server)
}
}
