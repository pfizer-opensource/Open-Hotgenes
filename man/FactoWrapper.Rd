% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PCA.R
\name{FactoWrapper}
\alias{FactoWrapper}
\alias{FactoWrapper_DFs}
\alias{factoExtra_DFs}
\title{FactoWrapper for PCA/HCPC of Hotgenes objects}
\usage{
FactoWrapper(
  Hotgenes = NULL,
  biplot = TRUE,
  min = 3,
  max = 5,
  ExpressionSlots = NULL,
  aux_features = "",
  coldata_ids = coldata_names(Hotgenes),
  Top_var = 10,
  ellipse.level = 0.5,
  ellipse.alpha = 0.5,
  habillage_selection = "clust",
  label_sel = c("all"),
  pointsize = 1,
  labelsize = 1,
  contrasts = NULL,
  hotList = NULL,
  padj_cut = 0.1,
  signif_ = NULL,
  .log2FoldChange = 0,
  SampleIDs = NULL
)

FactoWrapper_DFs(
  ExpressionDat = NULL,
  supp_data = NULL,
  sampleID_col = NULL,
  biplot = TRUE,
  min = 3,
  max = 5,
  Top_var = 10,
  ellipse.level = 0.5,
  ellipse.alpha = 0.5,
  habillage_selection = "clust",
  label_sel = c("all"),
  pointsize = 1,
  labelsize = 1,
  title = NULL,
  signif_ = NULL
)

factoExtra_DFs(
  PCA_obj = NULL,
  ellipse.alpha = 1,
  ellipse.level = 0.5,
  habillage_id = "clust",
  habillage_shape_id = "clust",
  point_size = 3,
  label_size = 3,
  ...
)
}
\arguments{
\item{Hotgenes}{Hotgenes R object}

\item{biplot}{Boolean value. If TRUE (Default), both individuals and variables
will be shown on the plot. If FALSE, only individuals will be plotted.}

\item{min}{an integer. The least possible number of clusters suggested.}

\item{max}{an integer. The higher possible number of clusters suggested; by default the minimum between 10 and the number of individuals divided by 2.}

\item{ExpressionSlots}{name of normalized data to use.
If NULL (default), the first name returned by ExpressionSlots_
will be used.
See HotgenesObj.}

\item{aux_features}{vector of strings. Options include
any value returned by auxiliary_assays_features() function. If provided,
corresponding auxiliary_assays values will be returned along with
expression data. If "" (default) no auxiliary_assays data will be included.
Query_set must be TRUE.}

\item{coldata_ids}{Variable(s) stored in coldata slot can be selected
by column name, using a vector strings. Default is \code{\link[=coldata_names]{coldata_names()}}. If
set to "", an empty data.frame is returned.}

\item{Top_var}{a numeric value indicating the number of top contributing
genes to show on the biplot.}

\item{ellipse.level}{0 to 1 numeric value to control
The level at which to draw an ellipse.}

\item{ellipse.alpha}{0 to 1 numeric value to control
transparency of ellipse.}

\item{habillage_selection}{string indicating the grouping to be shown.
Default is "clust", which represents the HCPC ward clusters.}

\item{label_sel}{String indicating if individuals "ind" and variables
"var" should be labeled on the biplot.}

\item{pointsize}{numeric value for point size.}

\item{labelsize}{numeric value for label size.}

\item{contrasts}{vector for DE data.frames in Output_DE slot to return.
See ?contrasts_. If NULL (default), all contrasts used.}

\item{hotList}{vector of Features to select. This will overide
all cut offs.}

\item{padj_cut}{numeric value for padj limit (0.1 is Default).}

\item{signif_}{integer indicating the number of significant digits (signif)
to be used. If NULL (NULL), original values returned.}

\item{.log2FoldChange}{absolute log2FoldChange for filtering.
Default is 0.}

\item{SampleIDs}{vector of sample ids to select}

\item{ExpressionDat}{wide expression data, rows are samples}

\item{supp_data}{wide format data.frame to be used as supplementary data}

\item{sampleID_col}{string column name for merging ExpressionDat with
supp_data}

\item{title}{the title of the graph}

\item{PCA_obj}{output of \code{\link[=FactoWrapper_DFs]{FactoWrapper_DFs()}}}

\item{habillage_id}{string with the qualitative variable
to use for ellipses. Default is "clust".}

\item{habillage_shape_id}{string with the qualitative variable
to use for individual shapes. Default is "clust".}

\item{point_size}{numeric value. Default is 3.}

\item{label_size}{numeric value. Default is 3.}

\item{...}{additional parameter to pass to \code{\link[factoextra:fviz_pca]{factoextra::fviz_pca_ind()}}}
}
\value{
FactoMiner plot showing HCPC of genes, samples, and conditions

FactoMiner plot showing HCPC of genes, samples, and conditions
}
\description{
FactoWrapper for PCA/HCPC of Hotgenes objects

FactoWrapper_DFs for PCA/HCPC of expression data

factoExtra_DFs a factoextra wrapper for FactoWrapper_DFs
}
\details{
Character coldata are removed prior to PCA. Please convert to
factors if these columns are needed.
}
\examples{
if(interactive()){
  # load packages
  library(Hotgenes)
  library(ggplot2)
  
  
  dds_Hotgenes_dir <- system.file("extdata",
                                  paste0("dds_Hotgenes", ".RDS"),
                                  package = "Hotgenes",
                                  mustWork = TRUE
  )
  # from DESeq2
  htgs <- readRDS(dds_Hotgenes_dir)
  
  
  # Adding auxiliary assay data
  set.seed(12)
  
  max_len <- length(SampleIDs_(htgs))
  
  AssayData  <- auxiliary_assays_default(htgs)  \%>\% 
    dplyr::mutate(assay1 = rnorm(max_len),
                  assay2 = rnorm(max_len))
  
  auxiliary_assays_(htgs) <- AssayData
  auxiliary_assays_(htgs)
  
  # FactoWrapper --------------------------------------
  
  # run PCA
  FactoOutput <- FactoWrapper(htgs,
                              contrasts = "Hrs_6_vs_0",
                              coldata_ids = c("text_Hrs", "Hrs", "Time"),
                              aux_features = "assay1",
                              padj_cut = 0.1,
                              .log2FoldChange = 0
  )
  
  # getting HCPC details
  FactoOutput$TopTibble # Feature
  FactoOutput$TopTibble_sup # Coldata Quanti.variable
  FactoOutput$TopGroups # Coldata Factors
  
  # Feature Ranks
  FactoOutput$Ranks 
  
  # Getting FactoMiner PCA object
  res.pca <- FactoOutput$res
  
  # loadings
  sweep(res.pca$var$coord, 2, sqrt(res.pca$eig[1:ncol(res.pca$var$coord), 1]), FUN = "/")
  
  # heatmap
  FactoOutput$TopTibble \%>\% 
    plyr::dlply("Cluster", identity) \%>\% 
    purrr::imap(function(x, y){
      x \%>\% 
        # tibble::enframe() \%>\% 
        dplyr::select(dplyr::any_of(c("Cluster", #"Interpretation", 
                                      "Feature"))) \%>\% 
        dplyr::slice(1:5) \%>\% 
        tibble::column_to_rownames("Feature")
      # dplyr::mutate()
    }) 
  

  annotation_row = FactoOutput$TopTibble \%>\% 
    plyr::dlply("Cluster", identity) \%>\% 
    purrr::imap(function(x, y){
      x \%>\% 
        # tibble::enframe() \%>\% 
        dplyr::select(dplyr::any_of(c("clust"="Cluster", #"Interpretation", 
                                      "Feature"))) \%>\% 
        dplyr::slice(1:5) \%>\% 
        tibble::column_to_rownames("Feature")
      # dplyr::mutate()
    })  \%>\% 
    purrr::list_rbind()
    
 df<- coldata_palettes(annotation_row)
 
 
  
  htgs \%>\%
    DEphe(
     # Topn = 2,
      show_colnames = FALSE,
      cutree_rows = 3,
      cluster_rows = TRUE,
      hotList = rownames(annotation_row),
      annotation_row = NULL ,
      annotation_colors = coldata_palettes(htgs) \%>\% append(df),
      arrangeby = c("Hrs", "sh"),
      annotations = c("Hrs", "sh"),
      cellheight = 10,
      cellwidth = 8
    )
  
  
  # update plot with fviz_pca_ind -------------------------------------------
  
  factoextra::fviz_pca_ind(FactoOutput$res,
                           axes = c(1, 2),
                           repel = FALSE, label = "none",
                           habillage = FactoOutput$res.hcpc$data.clust[, c("clust")],
                           col.quanti.sup = "black",
                           col.var = c("black"),
                           pointsize = 3,
                           labelsize = 4,
                           select.ind = list(contrib = 50),
                           col.ind.sup = "black",
                           ellipse.alpha = 0,
                           # title = title,
                           legend.title = "clust",
                           addEllipses = TRUE, ellipse.level = 0.5
  ) +
    theme_classic() +
    scale_shape_manual(values = rep(20, 100))
  
  
  
  # FactoWrapper_DFs --------------------------------------------------------
  
  
  ExpressionDat <- Normalized_Data_(htgs) \%>\%
    purrr::chuck(1) \%>\%
    as.data.frame() \%>\%
    tibble::rownames_to_column("Features") \%>\%
    tidyr::pivot_longer(cols = -"Features", names_to = "sample_id") \%>\%
    tidyr::pivot_wider(
      id_cols = "sample_id",
      names_from = "Features"
    )
  
  supp_data <- coldata_(htgs
  ) \%>\%
    tibble::rownames_to_column("sample_id") \%>\% 
    dplyr::left_join(auxiliary_assays_(htgs)\%>\%
                       tibble::rownames_to_column("sample_id"))
  
  
  PC <- FactoWrapper_DFs(
    ExpressionDat = ExpressionDat,
    supp_data = supp_data,
    sampleID_col = "sample_id"
  )
  
  PC$res_PPI_pa_1
  
  # with more plotting options
  factoExtra_DFs(PCA_obj = PC, repel = TRUE)
  
}
}
