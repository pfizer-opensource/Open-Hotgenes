% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Shiny_Hotgenes_UI_Module.R
\name{tabPanel_Hotgenes}
\alias{tabPanel_Hotgenes}
\alias{Shiny_Hotgenes_UI}
\alias{Shiny_Hotgenes_Server}
\alias{Shiny_Hotgenes}
\alias{Shiny_Hotgenes.default}
\alias{Shiny_Hotgenes.list}
\title{\code{\link[=tabPanel_Hotgenes]{tabPanel_Hotgenes()}} provides UI for loaded Hotgenes object}
\usage{
tabPanel_Hotgenes(
  id = "hotgenes_load",
  tabsetPanel_id = "tabset_Hotgenes",
  title = "Hotgenes",
  value = title
)

Shiny_Hotgenes_UI(id = NULL, tabsetPanel_id = "tabs", width = 3)

Shiny_Hotgenes_Server(
  id = NULL,
  input = NULL,
  output = NULL,
  session = NULL,
  Hotgenes = NULL,
  OntologyMethods = Hotgenes::OntologyMethods(),
  Mapper_choices = names(Mapper_(Hotgenes)),
  parallel.sz = 1L,
  max_col_levels = Inf,
  selected_fillby = "",
  remove_modal_spinner = TRUE
)

Shiny_Hotgenes(
  Hotgenes = NULL,
  OntologyMethods = Hotgenes::OntologyMethods(),
  Mapper_choices = names(Mapper_(Hotgenes)),
  theme = shinythemes::shinytheme("united"),
  parallel.sz = 1L,
  max_col_levels = Inf
)

\method{Shiny_Hotgenes}{default}(
  Hotgenes = NULL,
  OntologyMethods = Hotgenes::OntologyMethods(),
  Mapper_choices = names(Mapper_(Hotgenes)),
  theme = shinythemes::shinytheme("united"),
  parallel.sz = 1L,
  max_col_levels = Inf
)

\method{Shiny_Hotgenes}{list}(
  Hotgenes = NULL,
  OntologyMethods = Hotgenes::OntologyMethods(),
  Mapper_choices = names(Mapper_(Hotgenes)),
  theme = shinythemes::shinytheme("united"),
  parallel.sz = 1L,
  max_col_levels = Inf
)
}
\arguments{
\item{id}{An ID string that corresponds with the ID used to call the module's
UI function.}

\item{tabsetPanel_id}{string for tabsetPanel id prefix to use.
Default is "tabs". This is what controls the visibility of sidepanels.}

\item{title}{Display title for tab}

\item{value}{The value that should be sent when \code{tabsetPanel} reports
that this tab is selected. If omitted and \code{tabsetPanel} has an
\code{id}, then the title will be used.}

\item{width}{The width of the sidebar and main panel. By default, the
sidebar takes up 1/3 of the width, and the main panel 2/3. The total
width must be 12 or less.}

\item{input}{shiny server input parameter}

\item{output}{shiny server output parameter}

\item{session}{shiny server session parameter}

\item{Hotgenes}{R Hotgenes object}

\item{OntologyMethods}{output of OntologyMethods function.}

\item{Mapper_choices}{vector containing names of
Mapper_ columns that should be used to map expression data
to ontology gene identifiers. Default is names(Mapper_(Hotgenes)).
A named vector may be used, as well.}

\item{parallel.sz}{Number of threads of execution
to use when doing the calculations in parallel.}

\item{max_col_levels}{integer setting the maximum
number of levels a variable, from the coldata, can have for plots.}

\item{selected_fillby}{string for to be passed to BoxPlot as initial selection.
Default is NULL.}

\item{remove_modal_spinner}{logical, if TRUE remove_modal_spinner will
run at the end of initial server run.}

\item{theme}{One of the following:
\itemize{
\item \code{NULL} (the default), which implies a "stock" build of Bootstrap 3.
\item A \code{\link[bslib:bs_theme]{bslib::bs_theme()}} object. This can be used to replace a stock
build of Bootstrap 3 with a customized version of Bootstrap 3 or higher.
\item A character string pointing to an alternative Bootstrap stylesheet
(normally a css file within the www directory, e.g. \code{www/bootstrap.css}).
}}
}
\value{
a shiny object for visualization.

a shiny UI and server for visualization.
}
\description{
\code{\link[=tabPanel_Hotgenes]{tabPanel_Hotgenes()}} provides UI for loaded Hotgenes object

Modular Hotgenes UI

R shiny app for visualizing DE analysis
}
\examples{
library(Hotgenes)

# load example data
dds_Hotgenes_dir <- system.file("extdata",
  paste0("dds_Hotgenes", ".RDS"),
  package = "Hotgenes",
  mustWork = TRUE
)

# from DESeq2
HotgenesObj <- readRDS(dds_Hotgenes_dir) \%>\% Hotgenes::update_object()

fit_Hotgenes_dir <- system.file("extdata",
                                paste0("fit_Hotgenes", ".RDS"),
                                package = "Hotgenes",
                                mustWork = TRUE
)

# from limma
fit_Hotgenes <- readRDS(fit_Hotgenes_dir) 

# converting to list of Hotgenes
HotgenesList <- list(
  DESeq2_Hotgenes = HotgenesObj,
  limma_Hotgenes = fit_Hotgenes
) 

# app with single Hotgenes object
if(FALSE){
  
  Shiny_Hotgenes(fit_Hotgenes)
}

# app with multiple Hotgenes objects
if(FALSE){
 
  Shiny_Hotgenes(HotgenesList)
  
}


# or gsva -----------------------------------------------------------------
if(FALSE){
# msigdbr_wrapper ---------------------------------------------------------
Hotgenes::msigdbr_wrapper_choices() 

choice_set <- c("CP:KEGG", "CP:REACTOME", "CP:WIKIPATHWAYS")
choice_id <- "gene_symbol"


gsList <- msigdbr_wrapper(
  species = "human",
  set = choice_set,
  gene_col = choice_id
)

# HotgeneSets -------------------------------------------------------------
HotgenesObj \%>\% Mapper_()

HotgenesObj \%>\% contrastMatrix_()

# ?HotgeneSets
HotgeneSets_out <- HotgeneSets(
  Hotgenes = HotgenesObj,
  gset.idx.list = gsList,
  kcdf = "Gaussian",
  method = "gsva",
  min.sz = 5,
  max.sz = Inf,
  parallel.sz = 16L
)

HotgeneSets_out

# converting to list of Hotgenes
Hotgenes_sets_List <- list(
  DESeq2_Hotgenes = HotgenesObj,
  HotgeneSets = HotgeneSets_out
) 



# app with multiple Hotgenes objects

  
  Shiny_Hotgenes(Hotgenes_sets_List,
                 theme = "shinythemes/css/united.min.css")
  
}


# adding custom signatures ------------------------------------------------
# custom library ----------------------------------------------------------
  
if(FALSE){
  
  example_sigs <- msigdbr::msigdbr( species = "human", category = "H") \%>\% 
    dplyr::mutate_at( c("gene_symbol",  "entrez_gene", "ensembl_gene"),
                      as.character) #\%>\% 
  
  # create custom genesets in long format
  source_genesets <- example_sigs \%>\% 
    dplyr::mutate(species = "human",
                  set = .data$gs_collection,
                  geneset_names = .data$gs_name) \%>\% 
    dplyr::select(c("species", "set", "geneset_names", 
                    "gene_symbol",  "entrez_gene", "ensembl_gene"
    )) \%>\% 
    tidyr::pivot_longer(cols = c("gene_symbol",  "entrez_gene", "ensembl_gene"),
                        names_to = "aliase_category", values_to = "aliases") \%>\% 
    unique()
  
  # must have these column names:
  c("species", "set", "geneset_names", "aliase_category", "aliases")
  source_genesets 
  
  # create source requirements
  # this will feed into the shiny UI
  source_requirements <- list(
    species_choices = unique(source_genesets$species), 
    InputChoices = unique(source_genesets$set), 
    gene_col_choices = unique(source_genesets$aliase_category))
  
  
  # building library --------------------------------------------------------
  
  # give it a good name
  my_fun <-make_custom_geneset_library(library_name = "my_custom",
                                       version = "1", 
                                       source_genesets = source_genesets, 
                                       source_requirements = source_requirements)
  
  
  # append your custom library with default OntologyMethods 
  OntologyMethods_default <- OntologyMethods() \%>\% 
    append(my_fun)
  
  # now yor custom library is available in the app
  Shiny_Hotgenes(HotgenesObj,
                 OntologyMethods = OntologyMethods_default)
  
  
}

}
